{"version":3,"sources":["appts.ts","services/buttons.ts","app.js","controllers/controller.ts","controllers/main.ts","controllers/schedule.ts"],"names":["angular","app","module","navLinks","PageDefinition","Title","URL","Template","Controller","constant","config","$routeProvider","forEach","link","when","templateUrl","APP_GLOBAL_CONFIG","TemplatePrefix","controller","resolve","otherwise","FanMode","PushButtonResult","Button","GetButtonsResult","ServerButtonService","MockButtonService","MockButtonService.constructor","MockButtonService.GetButtons","MockButtonService.PushButton","MockButtonService.GetPowerState","MockButtonService.SetPowerState","MockButtonService.GetFanMode","MockButtonService.SetFanMode","ServerButtonService.constructor","ServerButtonService.GetButtons","ServerButtonService.PushButton","ServerButtonService.GetPowerState","ServerButtonService.GetFanMode","service","ControllerController","ControllerController.constructor","ControllerController.PushButton","$scope","$location","$route","$mdSidenav","NavLinks","$on","CurrentPage","current","locals","ActiveURL","path","replace","toggleSidenav","menuId","toggle"],"mappings":"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","file":"app.js","sourcesContent":["/// <reference path=\"angular.d.ts\" />\n/// <reference path=\"angular-route.d.ts\" />\n/// <reference path=\"angular-material.d.ts\" />\n\nvar app = angular.module(\"IRControlApp\", [\"ng\", \"ngMaterial\", \"ngRoute\"]);\n\nclass PageDefinition\n{\n\tTitle: string;\n\tURL: string;\n\tTemplate: string;\n\tController: string;\n}\n\nvar navLinks : PageDefinition[] =\n[\n\t{ Title: \"Control\", URL: \"control\", Template: \"control.html\", Controller: \"ControllerController\" },\n\t{ Title: \"Schedule\", URL: \"schedule\", Template: \"schedule.html\", Controller: \"ScheduleController\" }\n];\n\napp.constant(\"NavLinks\", navLinks);\n\napp.config([\"$routeProvider\", function($routeProvider: ng.route.IRouteProvider)\n{\n\tangular.forEach(navLinks, function(link : PageDefinition)\n\t{\n\t\t$routeProvider.when(\"/\" + link.URL,\n\t\t\t{\n\t\t\t\ttemplateUrl: APP_GLOBAL_CONFIG.TemplatePrefix + \"/\" + link.Template,\n\t\t\t\tcontroller: link.Controller,\n\t\t\t\tresolve: { PageDefinition: function() { return link } }\n\t\t\t});\n\t});\n\n\t$routeProvider.otherwise(\"/control\");\n}]);\n\n\n\ninterface IAppCurrentRoute extends ng.route.ICurrentRoute\n{\n    locals:\n\t{\n        $scope: ng.IScope;\n        $template: string;\n\t\tPageDefinition: PageDefinition\n    };\n}\n\ninterface IAppRoutes extends ng.route.IRouteService\n{\n\tcurrent: IAppCurrentRoute;\n}\n","/// <reference path=\"../angular.d.ts\" />\n/// <reference path=\"../ircontrol.d.ts\" />\n\nenum FanMode\n{\n\tUnknown,\n\tCool,\n\tEnergySaver,\n\tFan\n}\n\nclass Button\n{\n\tpublic Id: string;\n\tpublic Label: string;\n}\n\n/**\n * This result is returned from the server for the list of buttons.\n */\nclass GetButtonsResult\n{\n\tsuccess: boolean;\n\tmessage: string;\n\tbuttons: Button[];\n}\n\n/**\n * This result is returned from the server after a button-push operation.\n */\nclass PushButtonResult\n{\n\tsuccess: boolean;\n\tmessage: string;\n}\n\n/**\n * Service for pushing virtual buttons.\n */\ninterface IButtonService\n{\n\t/**\n\t * Gets the button definitions.\n\t * \n\t * @returns A promise with the button results.\n\t */\n\tGetButtons(): ng.IPromise<Button[]>;\n\t\n\t/**\n\t * Sends a button-push command.\n\t * \n\t * @returns A promise which succeeds if the request succeeds or returns the error message on failure.\n\t */\n\tPushButton(button: Button): ng.IPromise<void>;\n\t\n\t/**\n\t * Gets the unit's current power state.\n\t */\n\tGetPowerState() : boolean;\n\t\n\t/**\n\t * Sets the new power state for the unit.\n\t */\n\tSetPowerState(boolean);\n\n\t/**\n\t * Gets the unit's current fan mode.\n\t */\n\tGetFanMode() : FanMode;\n\t\n\t/**\n\t * Sets the new fan mode for the unit.\n\t */\n\tSetFanMode(FanMode);\n}\n\n/**\n * A button service which only pretends to work.\n */\nclass MockButtonService implements IButtonService\n{\n\tprivate $log : ng.ILogService;\n\tprivate $q: ng.IQService;\n\tprivate $timeout: ng.ITimeoutService;\n\n\tprivate powerState: boolean;\n\tprivate fanMode: FanMode;\n\n\tpublic constructor(logService: ng.ILogService, qService: ng.IQService, timeoutService: ng.ITimeoutService)\n\t{\n\t\tthis.$log = logService;\n\t\tthis.$q = qService;\n\t\tthis.$timeout = timeoutService;\n\t\tthis.powerState = false;\n\t\tthis.fanMode = FanMode.Fan;\n\t}\n\t\n\tpublic GetButtons(): ng.IPromise<Button[]>\n\t{\n\t\treturn this.$q.when([\n\t\t\t{\n\t\t\t\tId: \"fan_speed_up\",\n\t\t\t\tLabel: \"Fan \\u2191\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tId: \"fan_speed_down\",\n\t\t\t\tLabel: \"Fan \\u2193\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tId: \"temp_up\",\n\t\t\t\tLabel: \"Temp \\u2191\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tId: \"temp_down\",\n\t\t\t\tLabel: \"Temp \\u2193\"\n\t\t\t}\n\t\t]);\n\t}\n\t\n\tpublic PushButton(button: Button): ng.IPromise<void>\n\t{\n\t\tthis.$log.info(\"Push button \" + button.Label);\n\t\t\n\t\tvar future = this.$q.defer<void>();\n\t\t\n\t\tthis.$timeout(() => {}, (Math.random() + 0.01) * 5).then(() =>\n\t\t\t{\n\t\t\t\tif(Math.random() < 0.25)\n\t\t\t\t{\n\t\t\t\t\tvar result = new PushButtonResult();\n\t\t\t\t\tresult.success = false;\n\t\t\t\t\tfuture.reject(\"Request failed\")\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar result = new PushButtonResult();\n\t\t\t\t\t//result.success = true;\n\t\t\t\t\t//promise.resolve(result);\n\t\t\t\t\tfuture.resolve();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t\n\t\treturn future.promise;\n\t}\n\t\n\tpublic GetPowerState() : boolean\n\t{\n\t\treturn this.powerState;\n\t}\n\t\n\tpublic SetPowerState(state: boolean)\n\t{\n\t\tthis.$log.debug(\"SetPowerState: transitioning to \" + state);\n\t\tthis.powerState = state;\n\t\t// TODO push power button\n\t}\n\n\tpublic GetFanMode() : FanMode\n\t{\n\t\treturn this.fanMode;\n\t}\n\t\n\tpublic SetFanMode(mode: FanMode)\n\t{\n\t\tthis.$log.debug(\"SetFanMode: transitioning to \" + mode);\n\t\tthis.fanMode = mode;\n\t\t// TODO push appropriate button\n\t}\n}\n\n/**\n * A button service which is fully dependent on the remote server for the definitions.\n */\nclass ServerButtonService implements IButtonService\n{\n\tprivate _log: ng.ILogService;\n\tprivate _http: ng.IHttpService;\n\tprivate _q: ng.IQService;\n\n\tpublic constructor(logService: ng.ILogService, httpService: ng.IHttpService, qService: ng.IQService)\n\t{\n\t\t//console.debug(\"got \" + logService + \" \" + httpService + \" \" + qService);\n\t\tthis._log = logService;\n\t\tthis._http = httpService;\n\t\tthis._q = qService;\n\t}\n\n\t/**\n\t * Gets the button definitions.\n\t */\n\tpublic GetButtons(): ng.IPromise<Button[]>\n\t{\n\t\tvar future = this._q.defer<Button[]>();\n\t\tthis._http.get<GetButtonsResult>(APP_GLOBAL_CONFIG.API.GetButtons)\n\t\t\t.success(res =>\n\t\t\t{\n\t\t\t\tfuture.resolve(res.buttons);\n\t\t\t})\n\t\t\t.error(res =>\n\t\t\t{\n\t\t\t\tfuture.reject(res);\n\t\t\t});\n\n\t\treturn future.promise;\n\t}\n\t\n\t/**\n\t * Sends a button-push command.\n\t */\n\tpublic PushButton(button: Button): ng.IPromise<void>\n\t{\n\t\tvar future = this._q.defer<void>();\n\t\t//var data = \"name=\" + encodeURIComponent(button.Id);\n\t\tvar data = { name: button.Id };\n\t\tthis._http.post<PushButtonResult>(APP_GLOBAL_CONFIG.API.PostButtonPress, data)\n\t\t\t.success(res =>\n\t\t\t{\n\t\t\t\tfuture.resolve();\n\t\t\t})\n\t\t\t.error(res =>\n\t\t\t{\n\t\t\t\tfuture.reject(res);\n\t\t\t});\n\n\t\treturn future.promise;\n\t}\n\t\n\t/**\n\t * Gets the unit's current power state.\n\t */\n\tpublic GetPowerState() : boolean\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Sets the new power state for the unit.\n\t */\n\tpublic SetPowerState(boolean)\n\t{\n\t\t\n\t}\n\n\t/**\n\t * Gets the unit's current fan mode.\n\t */\n\tpublic GetFanMode() : FanMode\n\t{\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Sets the new fan mode for the unit.\n\t */\n\tpublic SetFanMode(FanMode)\n\t{\n\t\t\n\t}\n}\n\n//angular.module(\"IRControlApp\").service(\"IRButtons\", [\"$log\", \"$q\", \"$timeout\", MockButtonService]);\nangular.module(\"IRControlApp\").service(\"IRButtons\", [\"$log\", \"$http\", \"$q\", ServerButtonService]);",null,"/// <reference path=\"../angular.d.ts\" />\n/// <reference path=\"../services/buttons.ts\" />\n\n/*\nController for the main button-pusher.\n*/\n\ninterface IControllerScope extends ng.IScope\n{\n\tControlState: {\n\t\tPower: boolean;\n\t\tMode: FanMode\n\t};\n\tButtons: { [ id: string ]: Button };\n\t\n\tPushButton : (name: string) => void;\n}\n\nclass ControllerController\n{\n\tprivate _scope: IControllerScope;\n\tprivate _log: ng.ILogService;\n\tprivate _buttonService: IButtonService;\n\n\tprivate _buttons: Button[];\n\tprivate _buttonMap: { [ id: string ]: Button };\n\n\tpublic constructor(scope: IControllerScope, logService: ng.ILogService, buttonService: IButtonService)\n\t{\n\t\tvar self = this;\n\n\t\tthis._scope = scope;\n\t\tthis._log = logService;\n\t\tthis._buttonService = buttonService;\n\t\t\n\t\t//this._buttons = buttonService.GetButtons();\n\t\tthis._buttonMap = {};\n\t\tthis._buttonService.GetButtons().then(buttons =>\n\t\t\t{\n\t\t\t\tself._buttons = buttons;\n\t\t\t\tangular.forEach(self._buttons, (br : Button) =>\n\t\t\t\t{\n\t\t\t\t\tself._buttonMap[br.Id] = br;\n\t\t\t\t});\n\t\t\t\tself._scope.Buttons = self._buttonMap;\n\t\t\t},\n\t\t\treason =>\n\t\t\t{\n\t\t\t\t// TODO display error to user\n\t\t\t\tthis._scope.Buttons = {};\n\t\t\t});\n\t\t\n\t\tthis._scope.ControlState = { Power: buttonService.GetPowerState(), Mode: buttonService.GetFanMode() };\n\t\t\n\t\t//this._scope.PushButton = n => this._buttonService.PushButton(this._buttonMap[n]);\n\t\t//this._scope.PushButton = this.PushButton;\n\t\tthis._scope.PushButton = n => this.PushButton(self, n);\n\t\t\n\t\tthis._scope.$watch(s => (<IControllerScope>s).ControlState.Power, (n, o, s) => buttonService.SetPowerState(n));\n\n\t\tthis._scope.$watch(s => (<IControllerScope>s).ControlState.Mode, (n, o, s) => buttonService.SetFanMode(n));\n\t}\n\t\n\t/**\n\t * Handler for a button push.\n\t */\n\tprivate PushButton(self: ControllerController, name: string) : void\n\t{\n\t\tself._buttonService.PushButton(this._buttonMap[name]).then(v =>\n\t\t\t{\n\t\t\t\tthis._log.info(\"Pushed button \" + name + \" successfully\");\n\t\t\t},\n\t\t\treason =>\n\t\t\t{\n\t\t\t\tvar msg = \"Could not push button \" + name + \": \" + angular.toJson(reason);\n\t\t\t\talert(msg);\n\t\t\t\tthis._log.warn(msg);\n\t\t\t});\n\t}\n}\n\nangular.module(\"IRControlApp\").controller(\"ControllerController\", [\"$scope\", \"$log\", \"IRButtons\", ControllerController]);\n","/// <reference path=\"../angular.d.ts\" />\n/// <reference path=\"../angular-material.d.ts\" />\n/// <reference path=\"../appts.ts\" />\n\n/*\nController for the outer layer of the page.\n*/\ninterface IMainScope extends ng.IScope\n{\n\tNavLinks: any[];\n\tCurrentPage: { Title:string, ActiveURL:string };\n\ttoggleSidenav: (menuId: string) => void;\n}\n\nangular.module(\"IRControlApp\").controller(\"MainController\", [\"$scope\", \"$location\", \"$route\", \"$mdSidenav\", \"NavLinks\",\nfunction($scope : IMainScope, $location: ng.ILocationService, $route: IAppRoutes, $mdSidenav: angular.material.MDSidenavService,\n\tnavLinks : PageDefinition[])\n{\n\t$scope.NavLinks = navLinks;\n\n\t$scope.$on(\"$routeChangeSuccess\", function()\n\t{\n\t\t$scope.CurrentPage =\n\t\t{\n\t\t\tTitle: $route.current.locals.PageDefinition.Title,\n\t\t\tActiveURL: $location.path().replace(/^\\//, \"\")\n\t\t};\n\t})\n\n\t$scope.CurrentPage =\n\t{\n\t\tTitle: \"blah\",//$route.current.CurrentPage.Title,\n\t\tActiveURL: $location.path().replace(/^\\//, \"\")\n\t};\n\n\t$scope.toggleSidenav = function(menuId)\n\t{\n\t\t$mdSidenav(menuId).toggle();\n\t};\n}]);","/// <reference path=\"../angular.d.ts\" />\n\n/*\nController for the schedule configuration.\n*/\n\ninterface IScheduleScope extends ng.IScope\n{\n\t\n}\n\nangular.module(\"IRControlApp\").controller(\"ScheduleController\", [\"$scope\",\nfunction($scope: IScheduleScope)\n{\n\n}]);"],"sourceRoot":"/source/"}