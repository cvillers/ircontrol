{"version":3,"sources":["services/buttons.ts"],"names":["FanMode","Button","Button.constructor","GetButtonsResult","GetButtonsResult.constructor","PushButtonResult","PushButtonResult.constructor","MockButtonService","MockButtonService.constructor","MockButtonService.GetButtons","MockButtonService.PushButton","MockButtonService.GetPowerState","MockButtonService.SetPowerState","MockButtonService.GetFanMode","MockButtonService.SetFanMode","ServerButtonService","ServerButtonService.constructor","ServerButtonService.GetButtons","ServerButtonService.PushButton","ServerButtonService.GetPowerState","ServerButtonService.SetPowerState","ServerButtonService.GetFanMode","ServerButtonService.SetFanMode"],"mappings":"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","file":"services/buttons.js","sourcesContent":["/// <reference path=\"../angular.d.ts\" />\n/// <reference path=\"../ircontrol.d.ts\" />\n\nenum FanMode\n{\n\tUnknown,\n\tCool,\n\tEnergySaver,\n\tFan\n}\n\nclass Button\n{\n\tpublic Id: string;\n\tpublic Label: string;\n}\n\n/**\n * This result is returned from the server for the list of buttons.\n */\nclass GetButtonsResult\n{\n\tsuccess: boolean;\n\tmessage: string;\n\tbuttons: Button[];\n}\n\n/**\n * This result is returned from the server after a button-push operation.\n */\nclass PushButtonResult\n{\n\tsuccess: boolean;\n\tmessage: string;\n}\n\n/**\n * Service for pushing virtual buttons.\n */\ninterface IButtonService\n{\n\t/**\n\t * Gets the button definitions.\n\t * \n\t * @returns A promise with the button results.\n\t */\n\tGetButtons(): ng.IPromise<Button[]>;\n\t\n\t/**\n\t * Sends a button-push command.\n\t * \n\t * @returns A promise which succeeds if the request succeeds or returns the error message on failure.\n\t */\n\tPushButton(button: Button): ng.IPromise<void>;\n\t\n\t/**\n\t * Gets the unit's current power state.\n\t */\n\tGetPowerState() : boolean;\n\t\n\t/**\n\t * Sets the new power state for the unit.\n\t */\n\tSetPowerState(boolean);\n\n\t/**\n\t * Gets the unit's current fan mode.\n\t */\n\tGetFanMode() : FanMode;\n\t\n\t/**\n\t * Sets the new fan mode for the unit.\n\t */\n\tSetFanMode(FanMode);\n}\n\n/**\n * A button service which only pretends to work.\n */\nclass MockButtonService implements IButtonService\n{\n\tprivate $log : ng.ILogService;\n\tprivate $q: ng.IQService;\n\tprivate $timeout: ng.ITimeoutService;\n\n\tprivate powerState: boolean;\n\tprivate fanMode: FanMode;\n\n\tpublic constructor(logService: ng.ILogService, qService: ng.IQService, timeoutService: ng.ITimeoutService)\n\t{\n\t\tthis.$log = logService;\n\t\tthis.$q = qService;\n\t\tthis.$timeout = timeoutService;\n\t\tthis.powerState = false;\n\t\tthis.fanMode = FanMode.Fan;\n\t}\n\t\n\tpublic GetButtons(): ng.IPromise<Button[]>\n\t{\n\t\treturn this.$q.when([\n\t\t\t{\n\t\t\t\tId: \"fan_speed_up\",\n\t\t\t\tLabel: \"Fan \\u2191\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tId: \"fan_speed_down\",\n\t\t\t\tLabel: \"Fan \\u2193\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tId: \"temp_up\",\n\t\t\t\tLabel: \"Temp \\u2191\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tId: \"temp_down\",\n\t\t\t\tLabel: \"Temp \\u2193\"\n\t\t\t}\n\t\t]);\n\t}\n\t\n\tpublic PushButton(button: Button): ng.IPromise<void>\n\t{\n\t\tthis.$log.info(\"Push button \" + button.Label);\n\t\t\n\t\tvar future = this.$q.defer<void>();\n\t\t\n\t\tthis.$timeout(() => {}, (Math.random() + 0.01) * 5).then(() =>\n\t\t\t{\n\t\t\t\tif(Math.random() < 0.25)\n\t\t\t\t{\n\t\t\t\t\tvar result = new PushButtonResult();\n\t\t\t\t\tresult.success = false;\n\t\t\t\t\tfuture.reject(\"Request failed\")\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar result = new PushButtonResult();\n\t\t\t\t\t//result.success = true;\n\t\t\t\t\t//promise.resolve(result);\n\t\t\t\t\tfuture.resolve();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t\n\t\treturn future.promise;\n\t}\n\t\n\tpublic GetPowerState() : boolean\n\t{\n\t\treturn this.powerState;\n\t}\n\t\n\tpublic SetPowerState(state: boolean)\n\t{\n\t\tthis.$log.debug(\"SetPowerState: transitioning to \" + state);\n\t\tthis.powerState = state;\n\t\t// TODO push power button\n\t}\n\n\tpublic GetFanMode() : FanMode\n\t{\n\t\treturn this.fanMode;\n\t}\n\t\n\tpublic SetFanMode(mode: FanMode)\n\t{\n\t\tthis.$log.debug(\"SetFanMode: transitioning to \" + mode);\n\t\tthis.fanMode = mode;\n\t\t// TODO push appropriate button\n\t}\n}\n\n/**\n * A button service which is fully dependent on the remote server for the definitions.\n */\nclass ServerButtonService implements IButtonService\n{\n\tprivate _log: ng.ILogService;\n\tprivate _http: ng.IHttpService;\n\tprivate _q: ng.IQService;\n\n\tpublic constructor(logService: ng.ILogService, httpService: ng.IHttpService, qService: ng.IQService)\n\t{\n\t\t//console.debug(\"got \" + logService + \" \" + httpService + \" \" + qService);\n\t\tthis._log = logService;\n\t\tthis._http = httpService;\n\t\tthis._q = qService;\n\t}\n\n\t/**\n\t * Gets the button definitions.\n\t */\n\tpublic GetButtons(): ng.IPromise<Button[]>\n\t{\n\t\tvar future = this._q.defer<Button[]>();\n\t\tthis._http.get<GetButtonsResult>(APP_GLOBAL_CONFIG.API.GetButtons)\n\t\t\t.success(res =>\n\t\t\t{\n\t\t\t\tfuture.resolve(res.buttons);\n\t\t\t})\n\t\t\t.error(res =>\n\t\t\t{\n\t\t\t\tfuture.reject(res);\n\t\t\t});\n\n\t\treturn future.promise;\n\t}\n\t\n\t/**\n\t * Sends a button-push command.\n\t */\n\tpublic PushButton(button: Button): ng.IPromise<void>\n\t{\n\t\tvar future = this._q.defer<void>();\n\t\t//var data = \"name=\" + encodeURIComponent(button.Id);\n\t\tvar data = { name: button.Id };\n\t\tthis._http.post<PushButtonResult>(APP_GLOBAL_CONFIG.API.PostButtonPress, data)\n\t\t\t.success(res =>\n\t\t\t{\n\t\t\t\tfuture.resolve();\n\t\t\t})\n\t\t\t.error(res =>\n\t\t\t{\n\t\t\t\tfuture.reject(res);\n\t\t\t});\n\n\t\treturn future.promise;\n\t}\n\t\n\t/**\n\t * Gets the unit's current power state.\n\t */\n\tpublic GetPowerState() : boolean\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Sets the new power state for the unit.\n\t */\n\tpublic SetPowerState(boolean)\n\t{\n\t\t\n\t}\n\n\t/**\n\t * Gets the unit's current fan mode.\n\t */\n\tpublic GetFanMode() : FanMode\n\t{\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Sets the new fan mode for the unit.\n\t */\n\tpublic SetFanMode(FanMode)\n\t{\n\t\t\n\t}\n}\n\n//angular.module(\"IRControlApp\").service(\"IRButtons\", [\"$log\", \"$q\", \"$timeout\", MockButtonService]);\nangular.module(\"IRControlApp\").service(\"IRButtons\", [\"$log\", \"$http\", \"$q\", ServerButtonService]);"],"sourceRoot":"/source/"}